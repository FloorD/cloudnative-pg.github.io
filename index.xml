<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CloudNative PG</title>
    <link>https://cloudnative-pg.io/</link>
    <description>Recent content on CloudNative PG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://cloudnative-pg.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://cloudnative-pg.io/footer/footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/footer/footer/</guid>
      <description>© 2019-2022 The CloudNativePG Contributors. The Linux Foundation has registered trademarks and uses trademarks. Postgres, PostgreSQL and the Slonik Logo are trademarks or registered trademarks of the PostgreSQL Community Association of Canada, and used with their permission.</description>
    </item>
    
    <item>
      <title>Advanced Architectures</title>
      <link>https://cloudnative-pg.io/info/advanced-architectures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/info/advanced-architectures/</guid>
      <description>You can extend the primary/standby architecture by adding a PgBouncer connection pooler between your application and your PostgreSQL database. Additionally, you can take advantage of replica clusters by creating one or more disaster recovery clusters in different regions, solely relying on file based WAL shipping from an object store or using a streaming replication connection.</description>
    </item>
    
    <item>
      <title>Autopilot</title>
      <link>https://cloudnative-pg.io/cards/automated/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/cards/automated/</guid>
      <description>It automates the steps that a human operator would do to deploy and to manage a Postgres database inside Kubernetes, including automated failover.</description>
    </item>
    
    <item>
      <title>Cloud Native</title>
      <link>https://cloudnative-pg.io/info/cloud-native/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/info/cloud-native/</guid>
      <description>Built on proven DevOps concepts like immutable infrastructure, declarative configuration, and microservice architecture, CloudNativePG exclusively relies on the Kubernetes API server to maintain the state of a PostgreSQL cluster. Additionally, CloudNativePG provides cloud native capabilities like self-healing, high availability, rolling updates, scale up/down of read-only replicas, affinity/anti-affinity/tolerations for scheduling, resource management, and so on.</description>
    </item>
    
    <item>
      <title>Coming soon!</title>
      <link>https://cloudnative-pg.io/hero/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/hero/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data persistence</title>
      <link>https://cloudnative-pg.io/cards/data_persistence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/cards/data_persistence/</guid>
      <description>It doesn’t rely on statefulsets and uses its own way to manage persistent volume claims where the PGDATA is stored.</description>
    </item>
    
    <item>
      <title>Designed for Kubernetes</title>
      <link>https://cloudnative-pg.io/cards/integrated/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/cards/integrated/</guid>
      <description>It&amp;rsquo;s entirely declarative, and directly integrates with the Kubernetes API server to update the state of the cluster — for this reason, it does not require an external failover management tool.</description>
    </item>
    
    <item>
      <title>Disaster Recovery</title>
      <link>https://cloudnative-pg.io/info/disaster-recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/info/disaster-recovery/</guid>
      <description>Define your disaster recovery objectives through continuous backup on object stores, and exploits the native Point-In-Time-Recovery capabilities of PostgreSQL by boostrapping a new cluster starting from a backup to a given timestamp.</description>
    </item>
    
    <item>
      <title>Example content for styleguide</title>
      <link>https://cloudnative-pg.io/styleguide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/styleguide/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed id nibh et sapien maximus tincidunt eu lobortis nisi. Etiam diam nibh, dapibus at pellentesque non, lobortis eu elit. Aliquam tristique a ligula vel pretium. Vestibulum congue id odio id mattis. Sed nunc nisi, convallis ut nisl a, blandit ultrices eros. Interdum et malesuada fames ac ante ipsum primis in faucibus. Quisque rutrum quam at scelerisque sodales. Fusce ac sem sit amet urna blandit dignissim.</description>
    </item>
    
    <item>
      <title>High Availability</title>
      <link>https://cloudnative-pg.io/info/high-availability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/info/high-availability/</guid>
      <description>PostgreSQL has a reliable foundation for high availability that is built on physical replication. CloudNativePG leverages streaming replication and a file-based one as a fallback method. You can tune synchronous replication to obtain zero data loss replicas.</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>https://cloudnative-pg.io/info/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/info/monitoring/</guid>
      <description>CloudNativePG has a built-in exporter for Prometheus that can be configured and customized through user defined metrics written in SQL. Logs, including database and audit, are transparently sent to stdout in JSON format for native integration with infrastructure log management pipelines.</description>
    </item>
    
    <item>
      <title>Postgres Operations</title>
      <link>https://cloudnative-pg.io/info/postgres-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/info/postgres-operations/</guid>
      <description>Most Postgres related operations can be done in a declarative way, including management of superuser credentials, application user, and application database. Declarative configuration also covers Postgres configuration and some common extensions like pg_stat_statements.</description>
    </item>
    
    <item>
      <title>Security &amp; TLS Certificates</title>
      <link>https://cloudnative-pg.io/info/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudnative-pg.io/info/security/</guid>
      <description>CloudNativePG supports security contexts by default and implements in-transit encrypted TLS connections. If you are not happy with auto-generated certificates, you can bring your own and even integrate with cert-manager. TLS client authentication for PostgreSQL is also supported, and auditing with PGAudit can be easily enabled in a declarative way.</description>
    </item>
    
  </channel>
</rss>
